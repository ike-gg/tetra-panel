generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model ManualAdjustment {
    id String @id @default(cuid())
    guildId String
    guildName String
    guildIcon String?
    emoteName String
    emoteUrl String @db.Text
    expiresOn DateTime
    accountId String
    account Account? @relation(fields: [accountId], references: [providerAccountId])

    @@index([accountId])
}

model Emotes {
    id String @id @default(cuid())
    emoteName String
    emoteUrl String
    reference String
    expiresOn DateTime
    origin EmoteOrigin
    accountId String
    account Account? @relation(fields: [accountId], references: [providerAccountId])

    @@index([accountId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String @unique
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    manualAdjustment  ManualAdjustment[]
    emotes            Emotes[]

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum EmoteOrigin {
    DISCORD
    SEVENTV
    BTTV
    FFZ
    TWITCH
    CUSTOM
}